!function(t){var e={};function n(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(i,a,function(e){return t[e]}.bind(null,a));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){t.exports=n.p+"285ae3239f1a614a5a05b4aa13ce31a5.png"},function(t,e,n){t.exports=n.p+"f6aa7f0421a5ce4cec7cc06690fd335e.png"},function(t,e,n){t.exports=n.p+"07215ce9469104c14aa43da4506cd199.png"},function(t,e,n){t.exports=n.p+"eff096f9e06e39117b751d9efd128b13.png"},function(t,e,n){t.exports=n.p+"70e6f529318d5043688ca77fba9d97fb.png"},function(t,e,n){t.exports=n.p+"f14fce4730208fa15a13846cdc754e69.png"},function(t,e,n){"use strict";n.r(e);var i,a,r=function(){function t(){var t=this;this.animations=[],this.updates=[],this.resize=function(){console.log("canvas resizing"),t.canvas.width=t.canvas.clientWidth,t.canvas.height=t.canvas.clientHeight},this.isRunning=!1,this.addAnimation=function(e){t.animations.push(e)},this.removeAnimation=function(e){t.animations.splice(t.animations.indexOf(e),1)},this.addUpdate=function(e){t.updates.push(e)},this.removeUpdate=function(e){t.updates.splice(t.updates.indexOf(e),1)},this.addAnimatable=function(e){t.updates.push(e.update),t.animations.push(e.draw)},this.removeAnimatable=function(e){t.updates.splice(t.updates.indexOf(e.update),1),t.animations.splice(t.animations.indexOf(e.draw),1)},this.addView=function(e){t.addAnimatable(e),e.width=t.width,e.height=t.height},this.removeView=function(e){t.removeAnimatable(e)},this.fps=32,this.fpsInterval=1e3/this.fps,this.animate=function(){t.isRunning&&requestAnimationFrame(t.animate);var e=Date.now(),n=e-t.lastFrameTime;if(n>t.fpsInterval){t.lastFrameTime=e;for(var i=n/1e3,a=0,r=t.updates;a<r.length;a++){(0,r[a])(i)}t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height);for(var o=0,s=t.animations;o<s.length;o++){(0,s[o])(t.ctx,t.canvas.width,t.canvas.height)}}}}return Object.defineProperty(t.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),t.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var e=document.createElement("canvas");document.body.appendChild(e),e.style.width="100%",e.style.height="100%";var n=new t;return n.canvas=e,n.ctx=e.getContext("2d"),document.addEventListener("keyup",function(t){80==t.keyCode&&n.playPause()}),n.startAnimation(),n.resize(),window.addEventListener("resize",n.resize),n},t.prototype.startAnimation=function(){console.log("start animation"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},t.prototype.stopAnimation=function(){console.log("stop animation"),this.isRunning=!1},t.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},t}(),o=function(){return function(t){var e=this;this.name=t,this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,i=e.updates;n<i.length;n++)(0,i[n])(t)},this.draw=function(t,n,i){if(e.isVisible)for(var a=0,r=e.animations;a<r.length;a++)(0,r[a])(t,n,i)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){console.log(t),console.log(e.animations.length),e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1),console.log(e.animations.length)}}}();!function(t){t.start="start",t.left="left",t.up="up",t.right="right",t.down="down",t.a="a"}(i||(i={})),function(t){t.keyboard="keyboard",t.gamepad="gamepad"}(a||(a={}));var s=function(){return function(){var t=this;this.listeners=[],this.addEventListener=function(e){if(!e||t.listeners.indexOf(e)>=0)throw"listener already added";t.listeners.push(e)},this.dispatchEvent=function(){for(var e=0;e<t.listeners.length;e++)(0,t.listeners[e])()},this.removeEventListener=function(e){if(!e||t.listeners.indexOf(e)<0)throw"listener not found";t.listeners.splice(t.listeners.indexOf(e),1)}}}(),l=function(){return function(){var t=this;this.listeners=[],this.addEventListener=function(e){if(!e||t.listeners.indexOf(e)>=0)throw"listener already added";t.listeners.push(e)},this.dispatchEvent=function(e){for(var n=0;n<t.listeners.length;n++)(0,t.listeners[n])(e)},this.removeEventListener=function(e){if(!e||t.listeners.indexOf(e)<0)throw"listener not found";t.listeners.splice(t.listeners.indexOf(e),1)}}}(),d=function(){return function(){var t=this;this.listeners=[],this.addEventListener=function(e){if(!e||t.listeners.indexOf(e)>=0)throw"listener already added";t.listeners.push(e)},this.dispatchEvent=function(e,n){for(var i=0;i<t.listeners.length;i++)(0,t.listeners[i])(e,n)},this.removeEventListener=function(e){if(!e||t.listeners.indexOf(e)<0)throw"listener not found";t.listeners.splice(t.listeners.indexOf(e),1)}}}(),c=function(){return function(t,e,n,r,o,s){var l=this;this.name=t,this.type=a.keyboard,this.signal=new d,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(t){t.keyCode==n&&(l.xAxes=-1,l.signal.dispatchEvent(l,i.left)),t.keyCode==e&&(l.yAxes=-1,l.signal.dispatchEvent(l,i.up)),t.keyCode==o&&(l.xAxes=1,l.signal.dispatchEvent(l,i.right)),t.keyCode==r&&(l.yAxes=1,l.signal.dispatchEvent(l,i.down)),13==t.keyCode&&(l.start=!0,l.signal.dispatchEvent(l,i.start)),t.keyCode==s&&(l.a=!0,l.signal.dispatchEvent(l,i.a))}),document.addEventListener("keyup",function(t){t.keyCode==n&&(l.xAxes=-1)&&(l.xAxes=0),t.keyCode==e&&(l.yAxes=-1)&&(l.yAxes=0),t.keyCode==o&&(l.xAxes=1)&&(l.xAxes=0),t.keyCode==r&&(l.yAxes=1)&&(l.yAxes=0),13==t.keyCode&&(l.start=!1),t.keyCode==s&&(l.a=!1)})}}(),h=function(){function t(){var t=this;this.gamepads=[],this.scangamepads=function(){for(var e=navigator.getGamepads?navigator.getGamepads():[],n=0;n<e.length;n++)e[n]&&!(e[n].index in t.gamepads)&&e[n].buttons.length>=16&&(t.gamepads[e[n].index]=e[n],t.scannedGamepad.dispatchEvent(e[n]))},this.scannedGamepad=new l,this.reset()}return t.prototype.start=function(){this.gamepadScanner=setInterval(this.scangamepads,500)},t.prototype.stop=function(){clearInterval(this.gamepadScanner)},t.prototype.reset=function(){this.gamepads=[]},t}(),u=function(){function t(t,e){var n=this;this.name=t,this.index=e,this.timeout=.5,this.signalingTimers={},this.signalListener=function(){requestAnimationFrame(n.signalListener);var t=Date.now();n.checkSignal(n.start,i.start,t),n.checkSignal(n.a,i.a,t),n.checkSignal(n.up,i.up,t),n.checkSignal(n.right,i.right,t),n.checkSignal(n.left,i.left,t),n.checkSignal(n.down,i.down,t),n.checkSignal(n.yAxes<-.5,i.up,t),n.checkSignal(n.yAxes>.5,i.down,t),n.checkSignal(n.xAxes<-.5,i.left,t),n.checkSignal(n.xAxes>.5,i.right,t)},this.checkSignal=function(t,e,i){t?n.signalingTimers[e]?(i-n.signalingTimers[e])/1e3>=n.timeout&&n.signal.dispatchEvent(n,e):(n.signalingTimers[e]=Date.now(),n.signal.dispatchEvent(n,e)):n.signalingTimers[e]=void 0},this.signal=new d,this.type=a.gamepad}return Object.defineProperty(t.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"a",{get:function(){return navigator.getGamepads()[this.index].buttons[0].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"up",{get:function(){return navigator.getGamepads()[this.index].buttons[12].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return navigator.getGamepads()[this.index].buttons[15].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"down",{get:function(){return navigator.getGamepads()[this.index].buttons[13].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return navigator.getGamepads()[this.index].buttons[14].pressed},enumerable:!0,configurable:!0}),t.prototype.enableSignals=function(){this.signalListener()},t}(),f=n(0),g=n.n(f),p=n(1),m=n.n(p),y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),v=function(t){function e(){var e=t.call(this,"MenuView")||this;e.options=[],e.controllers=[],e.drawOptions=function(t,n,i){if(!(e.controllers.length<=0))for(var a=i/2-32*e.options.length/2,r=0;r<e.options.length;r++){var o=e.options[r];t.fillStyle="black",t.textAlign="center",t.textBaseline="middle",t.font="22px sans-serif";var s=a+5+32*r;t.fillText(o,n/2,s),r===e.selectedOption&&t.strokeRect(n/2-t.measureText(o).width/2-5,s-11-5,t.measureText(o).width+10,32)}},e.drawControllers=function(t,n,i){for(var r=n/2-(15+75*e.controllers.length)/2,o=0;o<e.controllers.length;o++){t.fillStyle="hsl("+o/e.controllers.length*360+",100%, 40%)";var s=r+15+75*o;switch(e.controllers[o].type){case a.gamepad:t.font="60px FontAwesome",t.fillText("",s,i/4);break;case a.keyboard:t.font="60px FontAwesome",t.fillText("",s,i/4)}}},e.addController=function(t){t.type==a.gamepad&&t.enableSignals(),t.signal.addEventListener(e.controllerSignal)},e.controllerSignal=function(t,n){if(n==i.start)e.controllers.indexOf(t)>=0?e.controllers.splice(e.controllers.indexOf(t),1):e.controllers.push(t);else if(e.controllers.length>0&&e.controllers[0]==t)switch(n){case i.down:e.selectedOption++,e.selectedOption>=e.options.length&&(e.selectedOption=0);break;case i.up:e.selectedOption--,e.selectedOption<0&&(e.selectedOption=e.options.length-1);break;case i.a:switch(e.selectedOption){case 0:e.gamepadScanner.stop(),e.requestStart.dispatchEvent();break;case 1:e.showControls=!e.showControls}}},e.requestStart=new s,e.options=["Start Game","Show / Hide Controls"],e.selectedOption=0,e.showControls=!0,e.controls_gamepad_image=new Image,e.controls_gamepad_image.src=g.a,e.controls_keyboard_image=new Image,e.controls_keyboard_image.src=m.a,e.addAnimation(function(t,n,i){if(e.showControls){var a=n/3,r=a/e.controls_gamepad_image.naturalWidth*e.controls_gamepad_image.naturalHeight;t.drawImage(e.controls_gamepad_image,a-a/2,3*i/4-r/2,a,r),r=a/e.controls_keyboard_image.naturalWidth*e.controls_keyboard_image.naturalHeight,t.drawImage(e.controls_keyboard_image,2*a-a/2,3*i/4-r/2,a,r)}}),e.addAnimation(e.drawOptions),e.addAnimation(e.drawControllers),e.gamepadScanner=new h,e.gamepadScanner.scannedGamepad.addEventListener(function(t){e.addController(new u(t.index.toString(),t.index))}),e.gamepadScanner.start();var n=new c("arrows",38,37,40,39,32);return e.addController(n),e}return y(e,t),e}(o),b=n(2),w=n.n(b),x=function(){function t(){}return t.colorImage=function(t,e){t.onload=function(){var n=document.createElement("canvas");n.width=t.naturalWidth,n.height=t.naturalHeight;var i=n.getContext("2d");i.drawImage(t,0,0);for(var a=i.getImageData(0,0,n.width,n.height),r=0;r<a.data.length;r+=4){var o=a.data[r],s=a.data[r+1],l=a.data[r+2];if(a.data[r+3]>.5&&o-s>50&&o-l>50){e=e;var d,c,h,u=.5,f=u*(1-Math.abs(e/60%2-1));e<60?(d=u,c=f,h=0):e<120?(d=f,c=u,h=0):e<180?(d=0,c=u,h=f):e<240?(d=0,c=f,h=u):e<300?(d=f,c=0,h=u):(d=u,c=0,h=f),d=255*(d+0),c=255*(c+0),h=255*(h+0),a.data[r]=d,a.data[r+1]=c,a.data[r+2]=h}}i.putImageData(a,0,0),t.src=n.toDataURL(),t.onload=function(){}}},t.colorImageAny=function(t,e){var n=document.createElement("canvas");n.width=t.naturalWidth,n.height=t.naturalHeight;var i=n.getContext("2d");i.drawImage(t,0,0);for(var a=i.getImageData(0,0,n.width,n.height),r=0;r<a.data.length;r+=4){a.data[r],a.data[r+1],a.data[r+2];if(a.data[r+3]>.5){e=e;var o,s,l,d=.5,c=d*(1-Math.abs(e/60%2-1));e<60?(o=d,s=c,l=0):e<120?(o=c,s=d,l=0):e<180?(o=0,s=d,l=c):e<240?(o=0,s=c,l=d):e<300?(o=c,s=0,l=d):(o=d,s=0,l=c),o=255*(o+0),s=255*(s+0),l=255*(l+0),a.data[r]=o,a.data[r+1]=s,a.data[r+2]=l}}i.putImageData(a,0,0),t.src=n.toDataURL()},t.getImageData=function(t,e){t.onload=function(){var n=document.createElement("canvas");n.width=t.naturalWidth,n.height=t.naturalHeight;var i=n.getContext("2d");i.drawImage(t,0,0),e(i.getImageData(0,0,n.width,n.height))}},t}(),O=function(){function t(t,e,n,i){this.x=t,this.y=e,this.width=n,this.height=i}return t.prototype.collidesWith=function(t){var e=!1,n=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(n=!0):t.y<=this.y&&t.y+t.width>this.y&&(n=!0)),e&&n},t}(),I=function(){return function(t,e,n,a){var r=this;this.controller=t,this.playerNumber=e,this.ballSpawner=n,this.tree=a,this.points=0,this.controllerSignal=function(t,e){if(!r.position)switch(e){case i.up:r.isJumping||(r.isJumping=!0,console.log((new Date).toISOString()+": "+r.y),r.vy=-2e3/969*window.innerHeight,r.baseY=r.y);break;case i.a:if(null==r.ballLeft){var n=r.ballSpawner.getBall(r.getLeftHandHitRect());n&&(n.color(r.playerNumber),r.ballLeft=n)}else(o=r.tree.addBall(r.ballLeft))>0&&(r.points+=o,r.ballLeft=null);if(null==r.ballRight){var a=r.ballSpawner.getBall(r.getRightHandHitRect());a&&(a.color(r.playerNumber),r.ballRight=a)}else{var o;(o=r.tree.addBall(r.ballRight))>0&&(r.points+=o,r.ballRight=null)}}},this.leftHandOffset=5,this.rightHandOffset=120,this.topHandOffset=140,this.handSize=25,this.getLeftHandHitRect=function(){return new O(r.x+r.leftHandOffset,r.y+r.topHandOffset,r.handSize,r.handSize)},this.getRightHandHitRect=function(){return new O(r.x+r.rightHandOffset,r.y+r.topHandOffset,r.handSize,r.handSize)},this.update=function(t){r.position||(r.x=r.x+r.controller.xAxes*t*500*2,r.controller.xAxes<0?r.moveLeft=!0:r.controller.xAxes>0&&(r.moveLeft=!1)),r.y=r.y+r.vy*t,r.isJumping&&(r.vy<=0&&r.vy+r.g*t>=0&&console.log((new Date).toISOString()+": "+r.y),r.vy=r.vy+r.g*t,r.y>r.baseY&&(r.vy=0,r.y=r.baseY,console.log((new Date).toISOString()+": "+r.y),r.isJumping=!1)),r.ballLeft&&(r.ballLeft.x=r.x+r.leftHandOffset+r.handSize/2,r.ballLeft.y=r.y+r.topHandOffset-r.handSize),r.ballRight&&(r.ballRight.x=r.x+r.rightHandOffset+r.handSize/2,r.ballRight.y=r.y+r.topHandOffset-r.handSize)},this.draw=function(t,e,n){0==r.y&&r.playerImage.naturalHeight&&(r.y=n-40-r.playerImage.naturalHeight),r.moveLeft?t.drawImage(r.playerImage,r.x,r.y):(t.save(),t.scale(-1,1),t.drawImage(r.playerImage,-r.x-r.playerImage.naturalWidth,r.y),t.restore()),r.ballLeft&&r.ballLeft.draw(t,e,n),r.ballRight&&r.ballRight.draw(t,e,n),t.textBaseline="top",t.textAlign="left",t.fillStyle=r.color,t.font="60px sans-serif",t.fillText(r.points.toString(),0,n*r.playerNumber),r.position&&(t.font=80-7*r.position+"px sans-serif",t.fillText(r.position+".",150,n*r.playerNumber))},this.end=function(t){r.position=t},this.playerImage=new Image,this.playerImage.src=w.a,x.colorImage(this.playerImage,360*this.playerNumber),this.x=0,this.y=0,this.vy=0,this.g=3e3/969*window.innerHeight,this.isJumping=!1,this.ballLeft=null,this.ballRight=null,t.signal.addEventListener(this.controllerSignal),this.color="hsl("+360*e+",100%, 30%)"}}(),S=n(3),A=n.n(S),k=function(){function t(){var t=this;this.balls=[],this.pointsLines=[0,.3,.5,.7,.8,.9],this.update=function(t){},this.addBall=function(e){if(e.getHitRect().collidesWith(new O(t.x,t.y,t.width,t.height))){var n=Math.round((e.x-t.x)/t.width*t.treeImageData.width),i=Math.round((e.y-t.y)/t.height*t.treeImageData.height);if(t.isPointOnTree(i,n)){t.balls.push(e);for(var a=1-(e.y-t.y)/t.height,r=0;r<t.pointsLines.length-1;r++){t.pointsLines[r];if(a<t.pointsLines[r+1])return r+1}return t.pointsLines.length}}return 0},this.draw=function(e,n,i){if(t.recalculate){var a=3*i/4,r=a/t.treeImage.naturalWidth*t.treeImage.naturalHeight;t.x=n-r,t.y=i-a-20,t.width=r,t.height=a,x.getImageData(t.treeImage,function(e){return t.treeImageData=e})}for(var o=0;o<t.pointsLines.length;o++){var s=1-t.pointsLines[o];e.beginPath(),e.moveTo(t.x+t.width/2,t.y+t.height*s),e.lineTo(t.x+t.width,t.y+t.height*s),e.strokeStyle="black",e.stroke(),e.fillStyle="black",e.textBaseline="bottom",e.textAlign="right",e.font="60px sans-serif",e.fillText((o+1).toString(),t.x+t.width,t.y+t.height*s)}e.drawImage(t.treeImage,t.x,t.y,t.width,t.height),t.balls.forEach(function(t){t.draw(e)})},this.treeImage=new Image,this.treeImage.src=A.a,this.recalculate=!0,this.x=0,this.y=0}return t.prototype.isPointOnTree=function(t,e){if(this.treeImageData)for(var n=t-5;n<t+5;n++)for(var i=e-5;i<e+5;i++){if(this.treeImageData.data[4*i+4*n*this.treeImageData.width+3]>.5)return!0}return!1},t}(),L=n(4),_=n.n(L),E=function(){return function(){var t=this;this.getHitRect=function(){return new O(t.x-t.ballImage.naturalWidth/2,t.y,t.ballImage.naturalWidth,t.ballImage.naturalHeight)},this.color=function(e){console.log("color"),x.colorImageAny(t.ballImage,360*e)},this.update=function(t){},this.draw=function(e,n,i){e.drawImage(t.ballImage,t.x-t.ballImage.naturalWidth/2,t.y)},this.ballImage=new Image,this.ballImage.src=_.a,x.colorImage(this.ballImage,360*Math.random()),this.x=0,this.y=0}}(),T=function(){return function(t,e){var n=this;this.intervalMs=t,this.func=e,this.update=function(t){n.lastFrameTime||(n.lastFrameTime=Date.now());var e=Date.now();e-n.lastFrameTime>n.intervalMs&&(n.lastFrameTime=e,n.func())}}}(),H=function(){return function(t){var e=this;this.rate=20,this.balls=[],this.getBall=function(t){for(var n=-1,i=0;i<e.balls.length;i++)e.balls[i].getHitRect().collidesWith(t)&&(n=i);if(n>=0){var a=e.balls[n];return e.balls.splice(n,1),a}},this.spawnBall=function(){var t=new E;t.x=600*Math.random()+100,t.y=-100,e.balls.push(t)},this.update=function(t){e.ticker.update(t);for(var n=0;n<e.balls.length;n++){var i=e.balls[n];i.y=i.y+30*t}},this.draw=function(t,n,i){for(var a=[],r=0;r<e.balls.length;r++){var o=e.balls[r];o.draw(t),o.y>i+100&&a.push(r)}for(r=0;r<a.length;r++){var s=a[r];e.balls.splice(s,1)}},this.ticker=new T(t,this.spawnBall)}}(),C=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),R=function(t){function e(e){var n=t.call(this,"GameView")||this;return n.controllers=e,n.player=[],n.start=function(){n.currentTime=0,n.playTime=300,n.addAnimation(n.introduction),n.addAnimation(n.animation);var t=new k;n.addAnimatable(t),n.spawner=new H(2e3/n.controllers.length),n.addAnimatable(n.spawner);for(var e=0;e<n.controllers.length;e++){var a=n.controllers[e],r=new I(a,e/n.controllers.length,n.spawner,t);n.player.push(r),n.addAnimatable(r),a.signal.addEventListener(function(t,e){n.gameFinished&&n.allowNewGame&&(e!=i.a&&e!=i.start||n.requestNewGame.dispatchEvent())})}n.addUpdate(n.timerUpdate)},n.introduction=function(t,e,i){t.fillStyle="black",t.font="22px sans-serif",t.textAlign="center",t.fillText("Grab some christmas balls with your hands",1*e/4,i/2),t.fillText("and put them on the tree.",1*e/4,i/2+30),t.font="27px sans-serif";var a=n.playTime-n.currentTime;a<0&&(a=0),t.fillText((Math.floor(a/60)+":"+Math.round(a%60)).toString(),1*e/4,i/2+70)},n.timerUpdate=function(t){if(!n.gameFinished&&(n.currentTime+=t,n.currentTime>=n.playTime)){n.gameFinished=!0,setTimeout(function(){n.allowNewGame=!0},3e3),n.removeAnimatable(n.spawner),n.removeAnimation(n.introduction),n.addAnimation(function(t,e,i){n.allowNewGame&&(t.textAlign="center",t.textBaseline="top",t.fillStyle="black",t.font="22px sans-serif",t.fillText("Press a button to start a new game.",1*e/4,i/2))}),n.player=n.player.sort(function(t,e){return e.points-t.points});for(var e=0;e<n.player.length;e++){n.player[e].end(e+1)}}},n.animation=function(t,e,n){t.fillStyle="black",t.fillRect(0,n,e,-30),t.fillStyle="brown",t.fillRect(0,n-30,e,-70)},n.requestNewGame=new s,n}return C(e,t),e}(o),G=n(5),D=n.n(G),P=function(){function t(){var t=this;this.start=function(){t.game=new R(t.menu.controllers),t.menu.hide(),t.menu.requestStart.removeEventListener(t.start),t.menu=null,t.animation.addView(t.game),t.game.requestNewGame.addEventListener(t.newGame),console.log("start"),t.game.start()},this.newGame=function(){t.menu=new v,t.menu.requestStart.addEventListener(t.start),t.game&&(t.game.requestNewGame.removeEventListener(t.newGame),t.game.hide(),t.game=null),t.animation.addView(t.menu),t.menu.show()}}return t.prototype.run=function(){this.animation=r.createInBody(),this.changeFavicon(D.a),this.newGame()},t.prototype.changeFavicon=function(t){var e=document.createElement("link"),n=document.getElementById("dynamic-favicon");e.id="dynamic-favicon",e.rel="shortcut icon",e.href=t,n&&document.head.removeChild(n),document.head.appendChild(e)},t}();document.addEventListener("DOMContentLoaded",function(){(new P).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,