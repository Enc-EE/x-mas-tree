!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){e.exports=n.p+"285ae3239f1a614a5a05b4aa13ce31a5.png"},function(e,t,n){e.exports=n.p+"f6aa7f0421a5ce4cec7cc06690fd335e.png"},function(e,t,n){e.exports=n.p+"07215ce9469104c14aa43da4506cd199.png"},function(e,t,n){e.exports=n.p+"eff096f9e06e39117b751d9efd128b13.png"},function(e,t,n){e.exports=n.p+"70e6f529318d5043688ca77fba9d97fb.png"},function(e,t,n){e.exports=n.p+"f14fce4730208fa15a13846cdc754e69.png"},function(e,t,n){"use strict";n.r(t);var i,a,o=function(){function e(){var e=this;this.animations=[],this.updates=[],this.resize=function(){console.log("canvas resizing"),e.canvas.width=e.canvas.clientWidth,e.canvas.height=e.canvas.clientHeight},this.isRunning=!1,this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=32,this.fpsInterval=1e3/this.fps,this.animate=function(){e.isRunning&&requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var i=n/1e3,a=0,o=e.updates;a<o.length;a++){(0,o[a])(i)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var r=0,s=e.animations;r<s.length;r++){(0,s[r])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),document.addEventListener("keyup",function(e){80==e.keyCode&&n.playPause()}),n.startAnimation(),n.resize(),window.addEventListener("resize",n.resize),n},e.prototype.startAnimation=function(){console.log("start animation"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},e.prototype.stopAnimation=function(){console.log("stop animation"),this.isRunning=!1},e.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},e}(),r=function(){return function(e){var t=this;this.name=e,this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(e){if(t.isVisible)for(var n=0,i=t.updates;n<i.length;n++)(0,i[n])(e)},this.draw=function(e,n,i){if(t.isVisible)for(var a=0,o=t.animations;a<o.length;a++)(0,o[a])(e,n,i)},this.show=function(){t.isVisible=!0},this.hide=function(){t.isVisible=!1},this.addAnimation=function(e){t.animations.push(e)},this.removeAnimation=function(e){t.animations.splice(t.animations.indexOf(e),1)},this.addUpdate=function(e){t.updates.push(e)},this.removeUpdate=function(e){t.updates.splice(t.updates.indexOf(e),1)},this.addAnimatable=function(e){t.updates.push(e.update),t.animations.push(e.draw)},this.removeAnimatable=function(e){console.log(e),console.log(t.animations.length),t.updates.splice(t.updates.indexOf(e.update),1),t.animations.splice(t.animations.indexOf(e.draw),1),console.log(t.animations.length)}}}();!function(e){e.start="start",e.left="left",e.up="up",e.right="right",e.down="down",e.a="a"}(i||(i={})),function(e){e.keyboard="keyboard",e.gamepad="gamepad"}(a||(a={}));var s=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(){for(var t=0;t<e.listeners.length;t++)(0,e.listeners[t])()},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),l=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t){for(var n=0;n<e.listeners.length;n++)(0,e.listeners[n])(t)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),c=function(){return function(){var e=this;this.listeners=[],this.addEventListener=function(t){if(!t||e.listeners.indexOf(t)>=0)throw"listener already added";e.listeners.push(t)},this.dispatchEvent=function(t,n){for(var i=0;i<e.listeners.length;i++)(0,e.listeners[i])(t,n)},this.removeEventListener=function(t){if(!t||e.listeners.indexOf(t)<0)throw"listener not found";e.listeners.splice(e.listeners.indexOf(t),1)}}}(),d=function(){return function(e,t,n,o,r,s){var l=this;this.name=e,this.type=a.keyboard,this.signal=new c,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==n&&(l.xAxes=-1,l.signal.dispatchEvent(l,i.left)),e.keyCode==t&&(l.yAxes=-1,l.signal.dispatchEvent(l,i.up)),e.keyCode==r&&(l.xAxes=1,l.signal.dispatchEvent(l,i.right)),e.keyCode==o&&(l.yAxes=1,l.signal.dispatchEvent(l,i.down)),13==e.keyCode&&(l.start=!0,l.signal.dispatchEvent(l,i.start)),e.keyCode==s&&(l.a=!0,l.signal.dispatchEvent(l,i.a))}),document.addEventListener("keyup",function(e){e.keyCode==n&&(l.xAxes=-1)&&(l.xAxes=0),e.keyCode==t&&(l.yAxes=-1)&&(l.yAxes=0),e.keyCode==r&&(l.xAxes=1)&&(l.xAxes=0),e.keyCode==o&&(l.yAxes=1)&&(l.yAxes=0),13==e.keyCode&&(l.start=!1),e.keyCode==s&&(l.a=!1)})}}(),h=function(){function e(){var e=this;this.gamepads=[],this.scangamepads=function(){for(var t=navigator.getGamepads?navigator.getGamepads():[],n=0;n<t.length;n++)t[n]&&!(t[n].index in e.gamepads)&&t[n].buttons.length>=16&&(e.gamepads[t[n].index]=t[n],e.scannedGamepad.dispatchEvent(t[n]))},this.scannedGamepad=new l,this.reset()}return e.prototype.start=function(){this.gamepadScanner=setInterval(this.scangamepads,500)},e.prototype.stop=function(){clearInterval(this.gamepadScanner)},e.prototype.reset=function(){this.gamepads=[]},e}(),u=function(){function e(e,t){var n=this;this.name=e,this.index=t,this.timeout=.5,this.signalingTimers={},this.signalListener=function(){requestAnimationFrame(n.signalListener);var e=Date.now();n.checkSignal(n.start,i.start,e),n.checkSignal(n.a,i.a,e),n.checkSignal(n.up,i.up,e),n.checkSignal(n.right,i.right,e),n.checkSignal(n.left,i.left,e),n.checkSignal(n.down,i.down,e),n.checkSignal(n.yAxes<-.5,i.up,e),n.checkSignal(n.yAxes>.5,i.down,e),n.checkSignal(n.xAxes<-.5,i.left,e),n.checkSignal(n.xAxes>.5,i.right,e)},this.checkSignal=function(e,t,i){e?n.signalingTimers[t]?(i-n.signalingTimers[t])/1e3>=n.timeout&&n.signal.dispatchEvent(n,t):(n.signalingTimers[t]=Date.now(),n.signal.dispatchEvent(n,t)):n.signalingTimers[t]=void 0},this.signal=new c,this.type=a.gamepad}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"a",{get:function(){return navigator.getGamepads()[this.index].buttons[0].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"up",{get:function(){return navigator.getGamepads()[this.index].buttons[12].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"right",{get:function(){return navigator.getGamepads()[this.index].buttons[15].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"down",{get:function(){return navigator.getGamepads()[this.index].buttons[13].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"left",{get:function(){return navigator.getGamepads()[this.index].buttons[14].pressed},enumerable:!0,configurable:!0}),e.prototype.enableSignals=function(){this.signalListener()},e}(),f=n(0),g=n.n(f),p=n(1),m=n.n(p),v=function(){return function(){var e=this;this.get=function(t,n,i){e.request("GET",t,null,n,i)},this.post=function(t,n,i,a){e.request("POST",t,n,i,a)},this.request=function(e,t,n,i,a){console.log(e+" "+t);var o=new XMLHttpRequest;o.onreadystatechange=function(){4==o.readyState&&(console.log("response: "+o.status),200==o.status?i&&i(o.responseText):a&&a())},o.open(e,t,!0),"POST"==e?o.send(n):o.send()}}}(),y=function(){function e(e){var t=this;this.sigServeUrl="http://localhost:1337/",this.failCounter=0,this.connectSigServe=function(){var e=t.makeid();t.http.post(t.sigServeUrl+"connectstart/"+t.serverName+"/"+e,null,function(n){t.processName=e,t.waitForConnectOffer()},function(){t.failCounter++,t.failCounter<5&&t.connectSigServe()})},this.waitForConnectOffer=function(){t.http.get(t.sigServeUrl+"connectoffer/"+t.serverName+"/"+t.processName,function(e){t.rtcPeerConnection.setRemoteDescription(JSON.parse(JSON.parse(e))).then(function(){t.rtcPeerConnection.createAnswer().then(function(e){t.rtcPeerConnection.setLocalDescription(e),console.log(JSON.stringify(JSON.stringify(e))),t.http.post(t.sigServeUrl+"connectanswer/"+t.serverName+"/"+t.processName,JSON.stringify(JSON.stringify(e)),function(e){t.checkCandidates()})},function(e){console.log("error: "+e)})})},function(){console.log("no connectoffer"),console.log("retrying..."),setTimeout(function(){t.waitForConnectOffer()},2e3)})},this.addedCandidates=[],this.checkCandidates=function(){console.log("checkCandidates"),t.serverName&&t.processName?t.http.get(t.sigServeUrl+"servercandidate/"+t.serverName+"/"+t.processName,function(e){for(var n=JSON.parse(e),i=0;i<n.length;i++){var a=JSON.parse(n[i]);t.addedCandidates.indexOf(a)<0&&(console.log("add candidate"),t.rtcPeerConnection.addIceCandidate(a),t.addedCandidates.push(a))}setTimeout(function(){t.checkCandidates()},2e3)}):console.log("not configured")},this.serverName=e,this.http=new v;this.rtcPeerConnection=new RTCPeerConnection({iceServers:[{urls:"stun:stun1.l.google.com:19302"}]}),this.rtcPeerConnection.onicecandidate=function(e){console.log(" ICE candidate: \n"+(e.candidate?e.candidate.candidate:"(null)")),e.candidate&&t.addCandidate(e)},this.connectSigServe(),this.rtcPeerConnection.ondatachannel=function(e){console.log("hi data channel"),t.dataChannel=e.channel,t.dataChannel.onmessage=function(e){console.log(e)},setTimeout(function(){t.sendData("Hi there")},3e3)}}return e.prototype.addCandidate=function(e){var t=this;this.serverName&&this.processName?this.http.post(this.sigServeUrl+"clientcandidate/"+this.serverName+"/"+this.processName,JSON.stringify(JSON.stringify(e.candidate))):(setTimeout(function(){t.addCandidate(e)},3e3),console.log("not configured"))},e.prototype.sendData=function(e){this.dataChannel.send(e)},e.prototype.makeid=function(){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=0;n<5;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return e},e}(),w=function(){function e(){var e=this;this.sigServeUrl="http://localhost:1337/",this.processes=[],this.isConnecting=!1,this.failCounter=0,this.waitForConnectStart=function(){e.http.get(e.sigServeUrl+"connectstart/"+e.serverName,function(t){e.processName=JSON.parse(t),e.rtcPeerConnection.createOffer().then(function(t){e.rtcPeerConnection.setLocalDescription(t),e.http.post(e.sigServeUrl+"connectoffer/"+e.serverName+"/"+e.processName,JSON.stringify(JSON.stringify(t)),function(t){e.waitForConnectAnswer()})},function(e){console.log("error: "+e)})},function(){console.log("no connectstart"),console.log("retrying..."),setTimeout(function(){e.waitForConnectStart()},2e3)})},this.waitForConnectAnswer=function(){e.http.get(e.sigServeUrl+"connectanswer/"+e.serverName+"/"+e.processName,function(t){console.log("got answer"),e.rtcPeerConnection.setRemoteDescription(JSON.parse(JSON.parse(t))).then(function(){console.log("after setRemoteDescription"),e.checkCandidates()},function(e){console.log(e)})},function(){console.log("no connectanswer"),console.log("retrying..."),setTimeout(function(){e.waitForConnectAnswer()},2e3)})},this.addedCandidates=[],this.checkCandidates=function(){console.log("checkCandidates"),e.serverName&&e.processName?e.http.get(e.sigServeUrl+"clientcandidate/"+e.serverName+"/"+e.processName,function(t){for(var n=JSON.parse(t),i=0;i<n.length;i++){var a=JSON.parse(n[i]);e.addedCandidates.indexOf(a)<0&&(console.log("add candidate"),e.rtcPeerConnection.addIceCandidate(a),e.addedCandidates.push(a))}setTimeout(function(){e.checkCandidates()},2e3)}):console.log("not configured")},this.http=new v;this.rtcPeerConnection=new RTCPeerConnection({iceServers:[{urls:"stun:stun1.l.google.com:19302"}]}),this.dataChannel=this.rtcPeerConnection.createDataChannel("chat"),this.dataChannel.onmessage=function(t){console.log(t),e.sendData("answer")},this.rtcPeerConnection.onicecandidate=function(t){console.log(" ICE candidate: \n"+(t.candidate?t.candidate.candidate:"(null)")),t.candidate&&e.addCandidate(t)},this.rtcPeerConnection.onnegotiationneeded=function(){if(console.log("rtcPeerConnection.onnegotiationneeded"),e.isConnecting){console.log("rtcPeerConnection.onnegotiationneeded is connecting");try{e.rtcPeerConnection.createOffer().then(function(e){},function(e){console.log("error: "+e)})}catch(e){console.error(e)}}},this.createSigServe()}return e.prototype.createSigServe=function(){var e=this;console.log("creating sig serve");var t=this.makeid();this.http.post(this.sigServeUrl+"create/"+t,null,function(n){console.log("creating sig serve sucessful"),e.serverName=t,console.log(window.location.href+"#"+e.serverName),e.waitForConnectStart()},function(){e.failCounter++,e.failCounter<5&&(console.log("creating sig serve retry"),e.createSigServe())})},e.prototype.addCandidate=function(e){var t=this;this.serverName&&this.processName?this.http.post(this.sigServeUrl+"servercandidate/"+this.serverName+"/"+this.processName,JSON.stringify(JSON.stringify(e.candidate))):(setTimeout(function(){t.addCandidate(e)},3e3),console.log("not configured"))},e.prototype.sendData=function(e){this.dataChannel.send(e)},e.prototype.makeid=function(){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=0;n<5;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return e},e}(),b=function(){return function(){if(console.log(window.location.href),window.location.href.indexOf("#")>0){var e=decodeURI(window.location.href.split("#")[1]);console.log(e),new y(e)}else new w}}(),x=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),S=function(e){function t(){var t=e.call(this,"MenuView")||this;t.options=[],t.controllers=[],t.drawOptions=function(e,n,i){if(!(t.controllers.length<=0))for(var a=i/2-32*t.options.length/2,o=0;o<t.options.length;o++){var r=t.options[o];e.fillStyle="black",e.textAlign="center",e.textBaseline="middle",e.font="22px sans-serif";var s=a+5+32*o;e.fillText(r,n/2,s),o===t.selectedOption&&e.strokeRect(n/2-e.measureText(r).width/2-5,s-11-5,e.measureText(r).width+10,32)}},t.drawControllers=function(e,n,i){for(var o=n/2-(15+75*t.controllers.length)/2,r=0;r<t.controllers.length;r++){e.fillStyle="hsl("+r/t.controllers.length*360+",100%, 40%)";var s=o+15+75*r;switch(t.controllers[r].type){case a.gamepad:e.font="60px FontAwesome",e.fillText("",s,i/4);break;case a.keyboard:e.font="60px FontAwesome",e.fillText("",s,i/4)}}},t.addController=function(e){e.type==a.gamepad&&e.enableSignals(),e.signal.addEventListener(t.controllerSignal)},t.controllerSignal=function(e,n){if(n==i.start)t.controllers.indexOf(e)>=0?t.controllers.splice(t.controllers.indexOf(e),1):t.controllers.push(e);else if(t.controllers.length>0&&t.controllers[0]==e)switch(n){case i.down:t.selectedOption++,t.selectedOption>=t.options.length&&(t.selectedOption=0);break;case i.up:t.selectedOption--,t.selectedOption<0&&(t.selectedOption=t.options.length-1);break;case i.a:switch(t.selectedOption){case 0:t.gamepadScanner.stop(),t.requestStart.dispatchEvent();break;case 1:t.showControls=!t.showControls}}},t.requestStart=new s,t.options=["Start Game","Show / Hide Controls"],t.selectedOption=0,t.showControls=!0,t.controls_gamepad_image=new Image,t.controls_gamepad_image.src=g.a,t.controls_keyboard_image=new Image,t.controls_keyboard_image.src=m.a,t.addAnimation(function(e,n,i){if(t.showControls){var a=n/3,o=a/t.controls_gamepad_image.naturalWidth*t.controls_gamepad_image.naturalHeight;e.drawImage(t.controls_gamepad_image,a-a/2,3*i/4-o/2,a,o),o=a/t.controls_keyboard_image.naturalWidth*t.controls_keyboard_image.naturalHeight,e.drawImage(t.controls_keyboard_image,2*a-a/2,3*i/4-o/2,a,o)}}),t.addAnimation(t.drawOptions),t.addAnimation(t.drawControllers),t.gamepadScanner=new h,t.gamepadScanner.scannedGamepad.addEventListener(function(e){t.addController(new u(e.index.toString(),e.index))}),t.gamepadScanner.start();new b;var n=new d("arrows",38,37,40,39,32);return t.addController(n),t}return x(t,e),t}(r),C=n(2),O=n.n(C),I=function(){function e(){}return e.colorImage=function(e,t){e.onload=function(){var n=document.createElement("canvas");n.width=e.naturalWidth,n.height=e.naturalHeight;var i=n.getContext("2d");i.drawImage(e,0,0);for(var a=i.getImageData(0,0,n.width,n.height),o=0;o<a.data.length;o+=4){var r=a.data[o],s=a.data[o+1],l=a.data[o+2];if(a.data[o+3]>.5&&r-s>50&&r-l>50){t=t;var c,d,h,u=.5,f=u*(1-Math.abs(t/60%2-1));t<60?(c=u,d=f,h=0):t<120?(c=f,d=u,h=0):t<180?(c=0,d=u,h=f):t<240?(c=0,d=f,h=u):t<300?(c=f,d=0,h=u):(c=u,d=0,h=f),c=255*(c+0),d=255*(d+0),h=255*(h+0),a.data[o]=c,a.data[o+1]=d,a.data[o+2]=h}}i.putImageData(a,0,0),e.src=n.toDataURL(),e.onload=function(){}}},e.colorImageAny=function(e,t){var n=document.createElement("canvas");n.width=e.naturalWidth,n.height=e.naturalHeight;var i=n.getContext("2d");i.drawImage(e,0,0);for(var a=i.getImageData(0,0,n.width,n.height),o=0;o<a.data.length;o+=4){a.data[o],a.data[o+1],a.data[o+2];if(a.data[o+3]>.5){t=t;var r,s,l,c=.5,d=c*(1-Math.abs(t/60%2-1));t<60?(r=c,s=d,l=0):t<120?(r=d,s=c,l=0):t<180?(r=0,s=c,l=d):t<240?(r=0,s=d,l=c):t<300?(r=d,s=0,l=c):(r=c,s=0,l=d),r=255*(r+0),s=255*(s+0),l=255*(l+0),a.data[o]=r,a.data[o+1]=s,a.data[o+2]=l}}i.putImageData(a,0,0),e.src=n.toDataURL()},e.getImageData=function(e,t){e.onload=function(){var n=document.createElement("canvas");n.width=e.naturalWidth,n.height=e.naturalHeight;var i=n.getContext("2d");i.drawImage(e,0,0),t(i.getImageData(0,0,n.width,n.height))}},e}(),A=function(){function e(e,t,n,i){this.x=e,this.y=t,this.width=n,this.height=i}return e.prototype.collidesWith=function(e){var t=!1,n=!1;return this.x<=e.x?this.x<=e.x&&this.x+this.width>e.x&&(t=!0):e.x<=this.x&&e.x+e.width>this.x&&(t=!0),t&&(this.y<=e.y?this.y<=e.y&&this.y+this.width>e.y&&(n=!0):e.y<=this.y&&e.y+e.width>this.y&&(n=!0)),t&&n},e}(),k=function(){return function(e,t,n,a){var o=this;this.controller=e,this.playerNumber=t,this.ballSpawner=n,this.tree=a,this.points=0,this.controllerSignal=function(e,t){if(!o.position)switch(t){case i.up:o.isJumping||(o.isJumping=!0,console.log((new Date).toISOString()+": "+o.y),o.vy=-2e3/969*window.innerHeight,o.baseY=o.y);break;case i.a:if(null==o.ballLeft){var n=o.ballSpawner.getBall(o.getLeftHandHitRect());n&&(n.color(o.playerNumber),o.ballLeft=n)}else(r=o.tree.addBall(o.ballLeft))>0&&(o.points+=r,o.ballLeft=null);if(null==o.ballRight){var a=o.ballSpawner.getBall(o.getRightHandHitRect());a&&(a.color(o.playerNumber),o.ballRight=a)}else{var r;(r=o.tree.addBall(o.ballRight))>0&&(o.points+=r,o.ballRight=null)}}},this.leftHandOffset=5,this.rightHandOffset=120,this.topHandOffset=140,this.handSize=25,this.getLeftHandHitRect=function(){return new A(o.x+o.leftHandOffset,o.y+o.topHandOffset,o.handSize,o.handSize)},this.getRightHandHitRect=function(){return new A(o.x+o.rightHandOffset,o.y+o.topHandOffset,o.handSize,o.handSize)},this.update=function(e){o.position||(o.x=o.x+o.controller.xAxes*e*500*2,o.controller.xAxes<0?o.moveLeft=!0:o.controller.xAxes>0&&(o.moveLeft=!1)),o.y=o.y+o.vy*e,o.isJumping&&(o.vy<=0&&o.vy+o.g*e>=0&&console.log((new Date).toISOString()+": "+o.y),o.vy=o.vy+o.g*e,o.y>o.baseY&&(o.vy=0,o.y=o.baseY,console.log((new Date).toISOString()+": "+o.y),o.isJumping=!1)),o.ballLeft&&(o.ballLeft.x=o.x+o.leftHandOffset+o.handSize/2,o.ballLeft.y=o.y+o.topHandOffset-o.handSize),o.ballRight&&(o.ballRight.x=o.x+o.rightHandOffset+o.handSize/2,o.ballRight.y=o.y+o.topHandOffset-o.handSize)},this.draw=function(e,t,n){0==o.y&&o.playerImage.naturalHeight&&(o.y=n-40-o.playerImage.naturalHeight),o.moveLeft?e.drawImage(o.playerImage,o.x,o.y):(e.save(),e.scale(-1,1),e.drawImage(o.playerImage,-o.x-o.playerImage.naturalWidth,o.y),e.restore()),o.ballLeft&&o.ballLeft.draw(e,t,n),o.ballRight&&o.ballRight.draw(e,t,n),e.textBaseline="top",e.textAlign="left",e.fillStyle=o.color,e.font="60px sans-serif",e.fillText(o.points.toString(),0,n*o.playerNumber),o.position&&(e.font=80-7*o.position+"px sans-serif",e.fillText(o.position+".",150,n*o.playerNumber))},this.end=function(e){o.position=e},this.playerImage=new Image,this.playerImage.src=O.a,I.colorImage(this.playerImage,360*this.playerNumber),this.x=0,this.y=0,this.vy=0,this.g=3e3,this.isJumping=!1,this.ballLeft=null,this.ballRight=null,e.signal.addEventListener(this.controllerSignal),this.color="hsl("+360*t+",100%, 30%)"}}(),N=n(3),T=n.n(N),L=function(){function e(){var e=this;this.balls=[],this.pointsLines=[0,.3,.5,.7,.8,.9],this.update=function(e){},this.addBall=function(t){if(t.getHitRect().collidesWith(new A(e.x,e.y,e.width,e.height))){var n=Math.round((t.x-e.x)/e.width*e.treeImageData.width),i=Math.round((t.y-e.y)/e.height*e.treeImageData.height);if(e.isPointOnTree(i,n)){e.balls.push(t);for(var a=1-(t.y-e.y)/e.height,o=0;o<e.pointsLines.length-1;o++){e.pointsLines[o];if(a<e.pointsLines[o+1])return o+1}return e.pointsLines.length}}return 0},this.draw=function(t,n,i){if(e.recalculate){var a=3*i/4,o=a/e.treeImage.naturalWidth*e.treeImage.naturalHeight;e.x=n-o,e.y=i-a-20,e.width=o,e.height=a,I.getImageData(e.treeImage,function(t){return e.treeImageData=t})}for(var r=0;r<e.pointsLines.length;r++){var s=1-e.pointsLines[r];t.beginPath(),t.moveTo(e.x+e.width/2,e.y+e.height*s),t.lineTo(e.x+e.width,e.y+e.height*s),t.strokeStyle="black",t.stroke(),t.fillStyle="black",t.textBaseline="bottom",t.textAlign="right",t.font="60px sans-serif",t.fillText((r+1).toString(),e.x+e.width,e.y+e.height*s)}t.drawImage(e.treeImage,e.x,e.y,e.width,e.height),e.balls.forEach(function(e){e.draw(t)})},this.treeImage=new Image,this.treeImage.src=T.a,this.recalculate=!0,this.x=0,this.y=0}return e.prototype.isPointOnTree=function(e,t){if(this.treeImageData)for(var n=e-5;n<e+5;n++)for(var i=t-5;i<t+5;i++){if(this.treeImageData.data[4*i+4*n*this.treeImageData.width+3]>.5)return!0}return!1},e}(),P=n(4),E=n.n(P),_=function(){return function(){var e=this;this.getHitRect=function(){return new A(e.x-e.ballImage.naturalWidth/2,e.y,e.ballImage.naturalWidth,e.ballImage.naturalHeight)},this.color=function(t){console.log("color"),I.colorImageAny(e.ballImage,360*t)},this.update=function(e){},this.draw=function(t,n,i){t.drawImage(e.ballImage,e.x-e.ballImage.naturalWidth/2,e.y)},this.ballImage=new Image,this.ballImage.src=E.a,I.colorImage(this.ballImage,360*Math.random()),this.x=0,this.y=0}}(),R=function(){return function(e,t){var n=this;this.intervalMs=e,this.func=t,this.update=function(e){n.lastFrameTime||(n.lastFrameTime=Date.now());var t=Date.now();t-n.lastFrameTime>n.intervalMs&&(n.lastFrameTime=t,n.func())}}}(),H=function(){return function(e){var t=this;this.rate=20,this.balls=[],this.getBall=function(e){for(var n=-1,i=0;i<t.balls.length;i++)t.balls[i].getHitRect().collidesWith(e)&&(n=i);if(n>=0){var a=t.balls[n];return t.balls.splice(n,1),a}},this.spawnBall=function(){var e=new _;e.x=600*Math.random()+100,e.y=-100,t.balls.push(e)},this.update=function(e){t.ticker.update(e);for(var n=0;n<t.balls.length;n++){var i=t.balls[n];i.y=i.y+30*e}},this.draw=function(e,n,i){for(var a=[],o=0;o<t.balls.length;o++){var r=t.balls[o];r.draw(e),r.y>i+100&&a.push(o)}for(o=0;o<a.length;o++){var s=a[o];t.balls.splice(s,1)}},this.ticker=new R(e,this.spawnBall)}}(),D=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),G=function(e){function t(t){var n=e.call(this,"GameView")||this;return n.controllers=t,n.player=[],n.start=function(){n.currentTime=0,n.playTime=300,n.addAnimation(n.introduction),n.addAnimation(n.animation);var e=new L;n.addAnimatable(e),n.spawner=new H(2e3/n.controllers.length),n.addAnimatable(n.spawner);for(var t=0;t<n.controllers.length;t++){var a=n.controllers[t],o=new k(a,t/n.controllers.length,n.spawner,e);n.player.push(o),n.addAnimatable(o),a.signal.addEventListener(function(e,t){n.gameFinished&&n.allowNewGame&&(t!=i.a&&t!=i.start||n.requestNewGame.dispatchEvent())})}n.addUpdate(n.timerUpdate)},n.introduction=function(e,t,i){e.fillStyle="black",e.font="22px sans-serif",e.textAlign="center",e.fillText("Grab some christmas balls with your hands",1*t/4,i/2),e.fillText("and put them on the tree.",1*t/4,i/2+30),e.font="27px sans-serif";var a=n.playTime-n.currentTime;a<0&&(a=0),e.fillText((Math.floor(a/60)+":"+Math.round(a%60)).toString(),1*t/4,i/2+70)},n.timerUpdate=function(e){if(!n.gameFinished&&(n.currentTime+=e,n.currentTime>=n.playTime)){n.gameFinished=!0,setTimeout(function(){n.allowNewGame=!0},3e3),n.removeAnimatable(n.spawner),n.removeAnimation(n.introduction),n.addAnimation(function(e,t,i){n.allowNewGame&&(e.textAlign="center",e.textBaseline="top",e.fillStyle="black",e.font="22px sans-serif",e.fillText("Press a button to start a new game.",1*t/4,i/2))}),n.player=n.player.sort(function(e,t){return t.points-e.points});for(var t=0;t<n.player.length;t++){n.player[t].end(t+1)}}},n.animation=function(e,t,n){e.fillStyle="black",e.fillRect(0,n,t,-30),e.fillStyle="brown",e.fillRect(0,n-30,t,-70)},n.requestNewGame=new s,n}return D(t,e),t}(r),F=n(5),J=n.n(F),U=function(){function e(){var e=this;this.start=function(){e.game=new G(e.menu.controllers),e.menu.hide(),e.menu.requestStart.removeEventListener(e.start),e.menu=null,e.animation.addView(e.game),e.game.requestNewGame.addEventListener(e.newGame),console.log("start"),e.game.start()},this.newGame=function(){e.menu=new S,e.menu.requestStart.addEventListener(e.start),e.game&&(e.game.requestNewGame.removeEventListener(e.newGame),e.game.hide(),e.game=null),e.animation.addView(e.menu),e.menu.show()}}return e.prototype.run=function(){this.animation=o.createInBody(),this.changeFavicon(J.a),this.newGame()},e.prototype.changeFavicon=function(e){var t=document.createElement("link"),n=document.getElementById("dynamic-favicon");t.id="dynamic-favicon",t.rel="shortcut icon",t.href=e,n&&document.head.removeChild(n),document.head.appendChild(t)},e}();document.addEventListener("DOMContentLoaded",function(){(new U).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,